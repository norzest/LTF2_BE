name: Deploy development server to ECS
on:
  pull_request_target:
    branches: [ main ]

env:
  AWS_REGION: ap-northeast-2
  ECR_REPOSITORY: lguplus-prod-back

  ECS_CLUSTER_NAME: lg-prod-cluster
  ECS_CONTAINER_NAME: lg-prod-back-container
  ECS_SERVICE_NAME: lg-prod-service
  ECS_TASK_DEFINITION: lg-prod-task

jobs:
  CI_CD_START:
    runs-on: ubuntu-latest

    steps:
      - name: Setup github source code
        uses: actions/checkout@v3

      - name: Setup Java 8
        uses: actions/setup-java@v3
        with:
          distribution: temurin
          java-version: 8

      - name: make application properties file
        run: |
          mkdir -p ./src/main/resources
          touch ./src/main/resources/application.properties
          echo "${{ secrets.PROD_SPRING_APPLICATION_PROPERTIES }}" > ./src/main/resources/application.properties

      - name: Grant execute permission for gradlew
        run: chmod +x gradlew

      - name: Setup Gradle
        uses: gradle/gradle-build-action@v2

      - name: Execute Gradle build
        run: ./gradlew build

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push docker image to Amazon ECR
        id: build-image
        env:
          REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          REPOSITORY: ${{ env.ECR_REPOSITORY }}
          IMAGE_TAG: ${{ github.sha }}
        run: |
          docker build --platform amd64 -t ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }} .
          docker push ${{ env.REGISTRY }}/${{ env.REPOSITORY }}:${{ env.IMAGE_TAG }}
          echo "::set-output name=image::$REGISTRY/$REPOSITORY:$IMAGE_TAG"
        working-directory: "."

      - name: Download task definition
        id: task-file-json
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.ECS_TASK_DEFINITION }} --query taskDefinition > task-definition.json

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.ECS_CONTAINER_NAME }}
          image: ${{ steps.build-image.outputs.image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.ECS_SERVICE_NAME }}
          cluster: ${{ env.ECS_CLUSTER_NAME }}
          wait-for-service-stability: true